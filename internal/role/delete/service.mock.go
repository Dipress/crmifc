// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package delete is a generated GoMock package.
package delete

import (
	context "context"
	role "github.com/dipress/crmifc/internal/role"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindRole mocks base method
func (m *MockRepository) FindRole(ctx context.Context, id int) (*role.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRole", ctx, id)
	ret0, _ := ret[0].(*role.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRole indicates an expected call of FindRole
func (mr *MockRepositoryMockRecorder) FindRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRole", reflect.TypeOf((*MockRepository)(nil).FindRole), ctx, id)
}

// DeleteRole mocks base method
func (m *MockRepository) DeleteRole(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockRepositoryMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRepository)(nil).DeleteRole), ctx, id)
}
