// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package update is a generated GoMock package.
package update

import (
	context "context"
	category "github.com/dipress/crmifc/internal/category"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindCategory mocks base method
func (m *MockRepository) FindCategory(ctx context.Context, id int) (*category.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCategory", ctx, id)
	ret0, _ := ret[0].(*category.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCategory indicates an expected call of FindCategory
func (mr *MockRepositoryMockRecorder) FindCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCategory", reflect.TypeOf((*MockRepository)(nil).FindCategory), ctx, id)
}

// UpdateCategory mocks base method
func (m *MockRepository) UpdateCategory(ctx context.Context, id int, cat *category.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, id, cat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockRepositoryMockRecorder) UpdateCategory(ctx, id, cat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockRepository)(nil).UpdateCategory), ctx, id, cat)
}

// MockValidater is a mock of Validater interface
type MockValidater struct {
	ctrl     *gomock.Controller
	recorder *MockValidaterMockRecorder
}

// MockValidaterMockRecorder is the mock recorder for MockValidater
type MockValidaterMockRecorder struct {
	mock *MockValidater
}

// NewMockValidater creates a new mock instance
func NewMockValidater(ctrl *gomock.Controller) *MockValidater {
	mock := &MockValidater{ctrl: ctrl}
	mock.recorder = &MockValidaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidater) EXPECT() *MockValidaterMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockValidater) Validate(ctx context.Context, form *category.Form) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockValidaterMockRecorder) Validate(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidater)(nil).Validate), ctx, form)
}
